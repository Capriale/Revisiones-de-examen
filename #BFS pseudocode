#BFS pseudocode

function findTreasure(island, start_x, start_y, treasure_x, treasure_y):
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

    queue = createQueue()
    enqueue(queue, (start_x, start_y, 0))  # (current_x, current_y, steps)
    
    visited = createSet()
    add(visited, (start_x, start_y))

    #BFS loop
    while not isEmpty(queue):
        current_x, current_y, steps = dequeue(queue)

        #Check if treasure was reached
        if current_x == treasure_x and current_y == treasure_y:
            return steps  # Return the number of steps to reach the treasure

        #Explore the neighbors
        for direction in directions:
            next_x = current_x + direction[0]
            next_y = current_y + direction[1]

            #Check if next position is in the grid and is not an obstacle or visited
            if isValid(island, next_x, next_y) and (next_x, next_y) not in visited:
                enqueue(queue, (next_x, next_y, steps + 1))
                add(visited, (next_x, next_y))

    #return -1 if treasure not reachable
    return -1

function isValid(island, x, y):
    return x >= 0 and x < numberOfRows(island) and y >= 0 and y < numberOfColumns(island) and island[x][y] != 1