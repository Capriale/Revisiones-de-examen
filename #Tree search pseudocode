#Tree search pseudocode

function AStarTreeSearch(graph, start, goal, heuristic):
    #Create a priority queue for the frontier and add the starting node with estimated total cost
    frontier = createPriorityQueue()
    enqueue(frontier, (heuristic[start], start))
    
    #Create a dictionary to store the cost of reaching each node
    cost_so_far = createDictionary()
    cost_so_far[start] = 0
    
    #Loop while there are nodes to explore in the frontier
    while not isEmpty(frontier):
        #Get the node with the lowest estimated total cost (g + h)
        current_estimated_total_cost, current_node = dequeue(frontier)
        
        #If the goal is reached, return the cost
        if current_node == goal:
            return cost_so_far[current_node]
        
        #Explore the neighbors of the current node
        for neighbor, cost in neighbors(graph, current_node):
            new_cost = cost_so_far[current_node] + cost
            estimated_total_cost = new_cost + heuristic[neighbor]
            enqueue(frontier, (estimated_total_cost, neighbor))
            cost_so_far[neighbor] = new_cost
    
    #If the goal is unreachable, return -1
    return -1
